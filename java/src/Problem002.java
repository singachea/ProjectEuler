import java.util.ArrayList;
import java.util.Iterator;


/**
 * Created by singachea on 5/5/16.
 */
//
// Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
//
// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//
// By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.


// just for the sake for implementing Iterable.
class FibonacciGenerator implements Iterable<Integer> {
    int cur = 1;
    int prev = 1;
    int prevPrev = 0;
    int upperLimit;

    public FibonacciGenerator(int upperLimit) {
        this.upperLimit = upperLimit;
    }

    public ArrayList<Integer> allNumbers() {
        ArrayList<Integer> list = new ArrayList<>();
        Iterator<Integer> iterator = this.iterator();
        while(iterator.hasNext()) {
            list.add(iterator.next());
        }

        return list;
    }

    @Override
    public Iterator<Integer> iterator() {
        return new Iterator<Integer>() {

            @Override
            public boolean hasNext() {
                return cur <= upperLimit;
            }

            @Override
            public Integer next() {
                int temp = cur;

                prevPrev = prev;
                prev = cur;
                cur = prev + prevPrev;

                return temp;
            }
        };
    }
}

public class Problem002 {


    public static void main(String[] args) {
        FibonacciGenerator fg = new FibonacciGenerator(4000000);

        int sum = fg.allNumbers()
                    .stream()
                    .filter(e -> e % 2 == 0)
                    .mapToInt(Integer::intValue)
                    .sum();

        System.out.println(sum);
    }

}
